import openai
import store
import pdf_gen
import scraper

openai.api_key = store.secret

def query_openai(query, tokens=1024, model_type="gpt-3.5"):
    """
    Queries different OpenAI models using POST requests. 
    :param query: The query to send to the OpenAI API.
    :param tokens: The maximum number of tokens to generate in the response.
    1000 tokens is approximately 750 words, which costs $0.002/1K for gpt-3.5.
    :param model_type: Choose between text-davinci-003 or gpt-3.5 (default).
    From limited testing, there doesn't seem to be much difference between the two. 
    :return: The response generated by the OpenAI API.
    """
    if model_type == "davinci":
        response = openai.Completion.create(
            model="text-davinci-003",
            prompt=query,
            max_tokens=tokens
            )
    elif model_type == "gpt-3.5":
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            prompt=query,
            max_tokens=tokens
            )
    result = ''
    for choice in response.choices:
        result += choice.text
    return result

class concept:
    """
    Represents a concept and its subtopics, answers, summary, and related papers.
    """
    def __init__(self, title, topics_and_answers):
        self.title = title
        self.topics_and_answers = topics_and_answers #List of tuples, (subtopic, answer, papers)
        self.title_formatted = title.replace(" ", "_")
        self.openai_summary = query_openai(f"Provide a summary for {title}?")
        self.papers = scraper.get_papers(title, 3) #List of tuples, (title, author)

def get_topic_and_answers(title):
    """
    Gets subtopics related to a given title and their answer summaries and papers.
    :param title: The title of the topic.
    :return: A list of tuples, where each tuple contains the subtopic, its answer summary and related papers.
    """
    continue_asking = True
    subtopics = []
    while continue_asking:
        subtopic = input("What subtopic would you like to know about? ")
        if subtopic == "":
            continue_asking = False
        else:
            subtopics.append(subtopic)
    #List comprehension, tuple of (subtopic, answer, papers) using OpenAI and Google Scholar.
    topics_answers = [(subtopic, query_openai(f"Can you tell me about the {subtopic} for the {title}.", 500), scraper.get_papers(f"{title}+{subtopic}", 3)) for subtopic in subtopics]
    
    if not topics_answers:
        topics_answers.append(("No other topic", "N/a", []))
        
    return topics_answers


def main():
    print("I can generate you information on things like proteins, pharmacology and experimental techniques.")
    title = input("What concept would you like to know about? ")
    topics_and_answers = get_topic_and_answers(title)
    c = concept(title, topics_and_answers)
    pdf_gen.generate_pdf(c)
    

if __name__ == "__main__":
    main()
    exit()
